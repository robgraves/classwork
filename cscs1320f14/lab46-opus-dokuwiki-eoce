======EoCE======

=====Rules=====
Presented within will be various questions evaluating your knowledge and experience gained this semester. In places where you are able, the more you write and explain topics the better the chance you will have of receiving full credit (and alternatively, the more credit you will receive should something be incorrect).

The questions on this experience are open resource with the exception of other individuals. In that respect, it is CLOSED PERSON. This means you are not to communicate with other people (either in the class or otherwise), in real life or electronically. Use your own knowledge, use your own skills, and use your own ability to access the allowed resources to aid you in coming up with your well thought out responses to each question.

You are allowed, and expected, to seek clarification on any question by asking me. But the aim here is to evaluate what you have learned, so do not expect tutoring.

You are to do **all** items. Submission is to be as follows:

  * an organized and easy to read presentation of information on your EoCE wiki page.
  * if applicable, a submitted archive using the **submit** tool (likely via Makefile)

**DEADLINE FOR SUBMISSION:** You have until 05:29:59pm (that's 17:29:59 in 24-hour time) Thursday, December 18th, 2014 to complete your EoCE(s). This is the ultimate deadline for any and all coursework. There is no "late", only "too late". Don't be that person, not with this.

While some classes are allocated a specific meeting time during finals week, I make all such times available should you be free and have questions. Available times (all in **B007**) are:

  * Tuesday,   December 16th from 09:00am - 01:00pm, 03:00pm - 4:30pm
  * Wednesday, December 17th from 10:00am - 01:00pm, 03:00pm - 4:30pm
  * Thursday,  December 18th from 08:00am - 01:00pm, 02:30pm - 5:30pm

Good luck!

=====CPROG=====

====Obtain the EOCE project====
In order to perform this end of course experience, you will need to obtain a copy of the eoce0 project, located on lab46.

These instructions will place the project into your **~/src/cprog/eoce0/** directory. If you have been placing your code for this class in a different location, feel free to move it there.

**NOTE:** It is important that you keep the project directory named **eoce0**; changing its name will break some of the automated functionality making your life easier.

===Obtain eoce0===
Okay, you're ready to tackle **eoce0**, please log into lab46 and do the following:

<cli>
lab46:~$ cd /var/public/cprog/fall2014/eoce0
lab46:/var/public/cprog/fall2014/eoce0$ make copy
...
</cli>

===Change into your eoce0 project directory===
Once copied, you can now change into your project directory, by doing the following:

<cli>
lab46:/var/public/cprog/fall2014/eoce0$ cd ~/src/cprog/eoce0
lab46:~/src/cprog/eoce0$ 
</cli>

===Using the Makefile===
In the base of the eoce0 project directory is a Makefile which will automate some tasks for you (specifically, submitting, but it can also be used to help propagate any bugfixes or updates).

To see what options are available, run "**make help**"

Additionally, there are Makefiles in each of the **0x0/**, **0x1/**, **0x2/**, and **0x3/** subdirectories, which will facilitate the compilation of any code (all you have to do is change into said directory and run **make**, and watch for any warnings or errors).

====0x0: Fun with numbers====

In **0x0/** I would like you to create a program in **0x0.c**

Following will be the output of a program which I have not provided source code for. Your task is to recreate the necessary programming logic to produce identical output.

Output must be generated by the program (you're not allowed to just have a bunch of fixed printf() statements).

===Output===

<cli>
    00000000    00000001    00000001    00000002
    00000003    00000005    00000008    00000013
    00000021    00000034    00000055    00000089
    00000144    00000233    00000377    00000610
    00000987    00001597    00002584    00004181
    00006765    00010946    00017711    00028657
    00046368    00075025    00121393    00196418
    00317811    00514229    00832040    01346269
</cli>

You can use the provided **Makefile** to assist in program compilation; just type '**make**'

===Questions===
Please respond to the following:

  * Additionally, What would be the next row (next 4 values) that would occur should this output be allowed to continue?
  * In words, describe the pattern taking place with these numbers.

====0x1: Fun with Flags====

In the **0x1/** directory:

Using the GD library, create a C program in **0x1.c** that produces 3 separate images, each one depicting a unique flag.

Each flag must be unique, but each can be of a different level of difficulty. Note that you can always shoot for increasingly sophisticated ones if you so desire.

These do not have to depict real/official flags; they can be from fictional sources (Star Trek, Star Wars), they can be from State or Country flags.

If you are unsure of which level a particular flag falls under, please ask me for clarification.

===Easy===
  * at least 3 colors
  * examples: Chad, France, Italy

===Moar===
  * at least 3 colors
  * some use of arrays or loops in the producing of the image
  * some use of various design elements (lines, polygon)
  * examples: UK, Togo, Switzerland, Liberia, North Korea

===Sophisticated===
  * at least 2 colors if of sufficient detail (think UN or Federation flag)
  * must make central use of arrays and loops it the generation of the image contents
  * must have some different design elements (lines, rectangles, polygons, circle/arc)
  * examples: Antigua and Barbuda, Barbados, Australia, US

A good frame of reference between "easy" and "moar" is an easy flag may largely be just strips or colored rectangles.

Similarly, the distinguishing feature between "moar" and "sophisticated" is while you can have something with a star on it (Togo), it is typically singular in number, where if compared to a flag with similar elements (US), we see a lot more stars, and in particular arrangement.

You may also upload an image to your wiki space and/or provide a URL to the image in your **~/public_html/** web space.

You can use the provided **Makefile** to assist in program compilation; just type '**make**'

====0x2: Fun with ASCII characters====

We've played off and on with ASCII characters and their numeric representations throughout the semester. With our recent experience with files, along with processing input from the keyboard, I want you to write a program that manipulates ASCII character data.

In **0x2/** is a file called **0x2.c**; in a comment banner at the top of the file are further instructions indicating the particular specifications for the program I wish you to write.

You can use the provided **Makefile** to assist in program compilation; just type '**make**'

====0x3: Fun with games====

In **0x3/** is a file called **0x3.c**

Here we find an incomplete game in the vein of breakout.

Look over the source code and do the following:

  * comment it: identify major sections of code, and dissect the logic so that you can better understand what is going on
  * restore paddle movement with the cursor keys
  * enable an autopilot mode with the press of the TAB key, centering the ball in the middle of the paddle (except when at extreme edges of screen)
  * do something extra to the game; such as:
    * change the default brick layout
    * change the default color patterns
    * require 2 hits of each brick before it goes away
    * add a second player for cooperative play
    * simplify main() by moving code into separate functions, all called from main()

**NOTE:** in order to test this, you'll need to be in a terminal on one of the pod machines in the LAIR (NOT Lab46), or a machine with the SDL1 libraries and headers installed.

You can use the provided **Makefile** to assist in program compilation; just type '**make**'

====0x4: Your Perspective====
After an exciting and intellectually challenging run, we're arriving at the end of this semester's journey. The course as we all experienced it, unfolds in a manner pertaining in part to how you respond to concepts and topics (do we need more time, can I crank it up a couple notches, etc.) so each semester and each class is entirely different from any other- because of each of you, and all of us, working together and learning together.

So, searching deep down within your soul- balancing reason with emotion, and considering attendance and timeliness; answer me the following:

  * What grade do you feel you deserve for this course?
  * Why do you feel you deserve this mark? (Justify your answer based on your own perceived performance, not on need.)
  * How did you feel about the course?
  * Was it useful/interesting to you?
  * What was your least favorite aspect, and why?
  * What was something meaningful to you with respect to the course? Why does this stick out in your mind?
  * Any other comments or suggestions?

=====UNIX=====
====0x0: Script Analysis====
Analyze the following script and respond to the questions that follow:
 
<code bash 1>
#!/bin/bash
#
# Run this script as follows: ./script 44 33 22 11 12 23 34 45 5 1 3 2 4
#
function process() {
    sleep   "$1"
    echo -n "$1 "
}

for data in $*; do
    process "$data" &
done
wait
echo

exit 0
</code>

===Questions to answer===
  * What is this script doing? (think general operation/end product)
  * How is it doing this?
  * Comment the script and include your updated code below  
  * Adjust the script to output each value on a line by itself, include it below
  * If you wanted to reverse the order of processing, how might you do it?

===Your code===  
Place your code to the updated scripts here:  
  
<code bash>
# Your script
</code>

<code bash>
# Your script that reverses order of processing
</code>

====0x1: Mystery====
As someone with UNIX experience, you were the top candidate hired at an engineering and massage arts co-op, the lead technical aid in their new occult investigations and free energy bureau. Your first assignment is to solve a recurring mystery that has stumped middle management (moreso than when they had soda machines installed on the 7th floor and they did not vend Mr. Pibb on every third Wednesday, despite being adequately stocked)- namely, where is the output of a particular program going?

  * In the **/var/public/unix/fall2014/eoce0** directory is an executable named **mystery**. Where does the output of this program go?
    * (<nowiki>a</nowiki>) STDIN
    * (<nowiki>b</nowiki>) STDOUT
    * (<nowiki>c</nowiki>) STDERR
    * (<nowiki>d</nowiki>) /dev/null
  * How did you determine this?

Be sure to justify your answer and provide //proof// that backs up your claims.

**NOTE**: You will want to perform this activity in the **/var/public/unix/fall2014/eoce0** directory on lab46, as permissions on the file (intentional) may prevent you from making a copy.

====0x2: emordnilaP as a Palindrome====
Write two scripts, each one implementing palindrome checking functionality.

Each script must validate whether or not input is a palindrome (or not), and output a message appropriately.

Each script must perform its palindrome processing in an entirely different way from the other.

The intent here is to come up with fundamentally different ways of solving a problem.

===Your Code===
Put your code for your first iteration here:

<code bash>
# Your code
</code>

===Your Code===
Put your code for your second iteration here:

<code bash>
# Your code
</code>

====0x3: Data Reformatting====
In a recent project, scripts were written to parse the class data metrics collected for each individual, for the purposes of computing one's grade.

That data, specifically for **projects**, was of the format (sample given):

<code>
1:titlecustomize:customized Opus title section
1:designerlayout:10/17/2013 class
1:designerdeadline:10/17/2013 class
1:resume:created resume at designated URL
1:resumelayout:applied wiki styling
0:resumesubmit:did not submit resume project
1:introcustomize:customized Opus intro
0:introsubmit:did not submit URL to Opus
1:project submitted (archives)
1:project submitted before deadline (archives)
1:archive exists and is named correctly (archives)
0:smallest file is not correct (archives)
1:small file is correct (archives)
1:big file is correct (archives)
1:biggest file is correct (archives)
0:archive compression is not correct (archives)
</code>

Where each line is typically in the format of:

  SCORE:OTHER DATA

This allowed us to do some easy tallying to determine the total project score, but what if we wanted to do some further analysis? Such as a project-by-project breakdown?

For this reason, I propose a new format, which I'd like for you to write a script to transition your projects data from the old format to the new. You will not be updating the master copy (it will remain in the old format), but obtaining source data and storing the results more locally to your script(s).

The new format is (sample given):

<code>
3:intro:final tally of results (out of 3)
*:intro:submit:submitted URL to Opus [1/1]
*:intro:customize:did not customize Opus intro [1/1]
*:intro:customized Opus title section [1/1]
4:node0:final tally of results (out of 4)
*:node0:submitted on time [1/1]
*:node0:compiles cleanly [1/1]
*:node0:worked on display code  [1/1]
*:node0:output is correct [1/1]
3:node1:final tally of results (out of 4)
*:node1:submitted on time [1/1]
*:node1:compiles cleanly [0/1]
*:node1:worked on display code  [1/1]
*:node1:output is correct [1/1]
4:notes:final tally of results (out of 6)
*:notes:reviewer helpfulness 11/19/2013 [1/1]
*:notes:reviewer deadline 11/19/2013 MISSED [0/1]
*:notes:designer layout 10/25/2013 [1/1]
*:notes:designer deadline 10/25/2013 MISSED [0/1]
*:notes:author content 10/08/2013 [1/1]
*:notes:author deadline 10/08/2013 [1/1]
3:bonus:final tally of results (out of 0)
*:bonus:author content 10/01/2013 [1/0]
*:bonus:author content 10/17/2013 [1/0]
*:bonus:designer layout 10/17/2013 [1/0]
</code>

Now we see 2 types of lines. The first is the "final tally" line:

  YOUR_SCORE:PROJECT_NAME:final tally of results (out of TOTAL_POSSIBLE_SCORE)

The data lines all start with an '<nowiki>*</nowiki>', and merely provide a deeper level of detail (how we arrived at that grand total for the project). It is of the format:

  <nowiki>*</nowiki>:PROJECT_NAME:description <wiki>[</nowiki>YOUR_POINT/TOTAL_POINT<nowiki>]</nowiki>

While all our projects so far this semester have worked off a binary system (0 or 1 for points assigned), the new format doesn't make that assumption.

Also, each line item's point value (against its total) is presented at the very end of the line in square brackets (as shown).

Finally, to handle bonus points, notice what happens: the "total" values are all out of 0... so it ONLY counts for us, should we get any bonus points, and doesn't count against us should we not.

Each project is clumped together, its "final tally" line leading the stanza, with the follow-up line items beneath it.

Should there be any points deducted for lateness, they should be on the second line of the stanza (immediately following the "final tally" line). And would have the following format:

  <nowiki>*</nowiki>:dll0:LATE penalty (1 days) [-26]

Your task, as stated, will be to write a script that, as best as possible, converts your existing projects data to this new format, and stores it in a file local to the script for potential further processing. Your script needs to do all the heavy lifting.

===Your Code===
Put your code to your script here:

<code bash>

</code>

====0x4: Data Analysis====
With our reformatted projects data obtained in 0x3, I'd like to to write a script that performs further analysis of your data (or it could be a massive extension of your statuscalc script).

The idea is to break it down by project, showing the grand totals (out of 100), and determining other data points as requested below.

Here is a sample of what I'd like your script to produce:

<cli>
lab46:~/src/unix/eoce0/0x4$ ./showresults
=============================================================================
UNIX    intro notes node0 node1 sll0 sll1 sll2  avg prjct+attnd+ opus=  grade
=============================================================================
username: 100    86    91    79   99    0    0  65% 23/36+28/28+31/36= 82/100
lab46:~/src/unix/eoce0/0x4$ 
</cli>

Now, average is to be calculated in two different ways.

  * mode 1: by adding up project scores and dividing by number of projects (the usual averaging method)
  * mode 2: tallying up all the points accumulated, and dividing by the total number of points one could possibly accumulate.

===Your Code===
Put your code to your script here:

<code bash>

</code>

====0x5: Reflection====
Answer me the following:

  * Of all the work you've done this semester in this course, identify something that was meaningful to you. What is it?
  * Why does it stick out in your mind? Explain.
  * How did you feel about the course?
  * Was it useful/interesting to you?
  * What was your least favorite aspect, and why?
  * Any comments, suggestions?

====0x6: Personal Assessment====
After an exciting and intellectually challenging run, we're arriving at the end of this semester's journey. Some will be moving on, others sticking around for more. I make it a practice to listen to your thoughts and suggestions. The course, as we all experienced it, unfolds in a manner pertaining, in part, to how you respond to concepts and topics (do we need more time, can I crank it up a couple notches, etc.) so each semester and each class is entirely different from any other- because of each of you, and all of us, working together and learning together.

So, searching deep down within your soul- balancing reason with emotion, and considering attendance and timeliness; what grade do you feel you deserve for this course, and why? Justify your answer based on your own perceived performance to course ideals and content, not on need or desire.
=====Submission=====

====Opus====
All responses to questions, unless specifically indicated otherwise, should be addressed on this document (or the intended wiki document).

Please edit the appropriate section and provide the necessary information.

====File Submission====
For any other deliverables, if using a project directory tree you can obtain a copy of, when ready, submit it using the **Makefile**, as follows:

<cli>
lab46:~/src/CLASS/eoce0$ make submit
...
</cli>

If no formal project, you can submit requested files (preferably in an archive of their own), using the **submit** tool. A project called **eoce0** has been likely set up for this purpose.

